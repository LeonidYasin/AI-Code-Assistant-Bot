"""Natural Language Processing for command conversion"""
import logging
import json
import sys
from pathlib import Path
from typing import Dict, Any, Optional, Tuple, List
from telegram import Update
from telegram.ext import ContextTypes
from core.llm.client import llm_client

logger = logging.getLogger(__name__)

class NLPProcessor:
    """Processes natural language commands and converts them to strict commands"""
    
    def __init__(self):
        self.command_map = {
            'create_project': self._handle_create_project,
            'create_file': self._handle_create_file,
            'list_projects': self._handle_list_projects,
            'switch_project': self._handle_switch_project,
            'list_files': self._handle_list_files,
            'view_file': self._handle_view_file,
            'run_code': self._handle_run_code,
            'analyze_code': self._handle_analyze_code,
            'analyze_project': self._handle_analyze_project,
        }
    
    async def process_command(self, text: str, context: ContextTypes.DEFAULT_TYPE) -> Tuple[bool, str]:
        """Process natural language command and return (success, response)"""
        try:
            # Initialize active_projects in bot_data if it doesn't exist
            if 'active_projects' not in context.bot_data:
                context.bot_data['active_projects'] = {}
            
            # Get or initialize project manager
            if 'project_manager' not in context.bot_data:
                from core.project.manager import ProjectManager
                context.bot_data['project_manager'] = ProjectManager()
            
            # Get chat ID or use default for CLI
            chat_id = getattr(context, '_chat_id', 0)
            chat_id_str = str(chat_id)
            
            # Initialize active projects in instance if needed
            if not hasattr(self, '_active_projects'):
                self._active_projects = {}
            
            # Sync active projects between context and instance
            if chat_id_str in context.bot_data['active_projects']:
                self._active_projects[chat_id_str] = context.bot_data['active_projects'][chat_id_str]
            elif chat_id_str in self._active_projects:
                context.bot_data['active_projects'][chat_id_str] = self._active_projects[chat_id_str]
            
            # Sync with project manager's current project
            project_manager = context.bot_data['project_manager']
            if project_manager.current_project and chat_id_str not in context.bot_data['active_projects']:
                context.bot_data['active_projects'][chat_id_str] = project_manager.current_project
                self._active_projects[chat_id_str] = project_manager.current_project
            
            current_project = self._active_projects.get(chat_id_str)
            logger.info(f"Processing natural language input: {text}")
            logger.info(f"Current project for chat {chat_id}: {current_project}")
            logger.debug(f"Project manager current project: {project_manager.current_project}")
            logger.debug(f"Active projects in context: {context.bot_data['active_projects']}")
            logger.debug(f"Active projects: {context.bot_data['active_projects']}")
            
            # Prepare the prompt for the LLM
            prompt = self._build_prompt(text, current_project)
            
            # Show the prompt being sent to AI
            prompt_display = f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –ò–ò:\n```\n{prompt}\n```"
            await self._send_message(context, prompt_display)
            
            # Get response from LLM
            response = llm_client.call(prompt, is_json=True)
            
            # Show the raw AI response
            response_display = f"üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò:\n```json\n{response}\n```"
            await self._send_message(context, response_display)
            
            try:
                command_data = json.loads(response)
                command = command_data.get('command')
                params = command_data.get('params', {})
                
                # Show parsed command information
                command_info = (
                    f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: `{command}`\n"
                    f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n```json\n{json.dumps(params, indent=2, ensure_ascii=False)}\n```"
                )
                await self._send_message(context, command_info)
                
                if not command or command not in self.command_map:
                    error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}"
                    logger.error(error_msg)
                    await self._send_message(context, error_msg)
                    return False, error_msg
                
                # Ask for confirmation before executing
                confirmation = await self._ask_confirmation(
                    context,
                    f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É `{command}` —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?"
                )
                
                if not confirmation:
                    msg = "‚ùå –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                    await self._send_message(context, msg)
                    return False, msg
                
                # Execute the command
                logger.info(f"Executing command: {command} with params: {params}")
                execution_msg = f"‚ö° –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É `{command}`..."
                await self._send_message(context, execution_msg)
                
                result = await self.command_map[command](context, **params)
                
                # Log and show the result
                if isinstance(result, tuple) and len(result) == 2:
                    success, message = result
                    result_msg = f"‚úÖ {message}" if success else f"‚ùå {message}"
                else:
                    success = True
                    result_msg = "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                
                await self._send_message(context, result_msg)
                
                # Log without emojis to avoid encoding issues
                if isinstance(result, tuple) and len(result) == 2:
                    log_success, log_message = result
                    logger.info(f"Command completed - Success: {log_success}, Message: {log_message}")
                else:
                    logger.info(f"Command completed successfully: {result}")
                
                return success, result_msg
                
            except json.JSONDecodeError as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {str(e)}\n\n–û—Ç–≤–µ—Ç –ò–ò:\n```\n{response}\n```"
                await self._send_message(context, error_msg)
                logger.error(f"JSON decode error: {e}")
                return False, error_msg
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            logger.error(f"Error in process_command: {e}", exc_info=True)
            await self._send_message(context, error_msg)
            return False, error_msg
            
    async def _send_message(self, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
        """Helper method to send a message to the user"""
        try:
            if hasattr(context, 'send_message'):
                await context.send_message(chat_id=context._chat_id, text=text, parse_mode='Markdown')
            elif hasattr(context, 'reply_text'):
                await context.reply_text(text=text, parse_mode='Markdown')
            else:
                print(f"\n[CLI MESSAGE]\n{text}\n")
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            print(f"\n[ERROR SENDING MESSAGE]\n{text}\n")
            
    async def _ask_confirmation(self, context: ContextTypes.DEFAULT_TYPE, question: str) -> bool:
        """Ask for user confirmation before executing a command"""
        # In non-interactive mode (like when running from command line with parameters),
        # we'll auto-confirm for simplicity
        is_interactive = hasattr(sys, 'stdin') and sys.stdin.isatty()
        
        if not hasattr(context, 'bot') or not hasattr(context, '_chat_id'):
            if is_interactive:
                # In interactive CLI mode, ask for confirmation
                print(f"\n{question} (y/n): ", end='', flush=True)
                try:
                    response = input().strip().lower()
                    return response in ('y', 'yes', '–¥', '–¥–∞')
                except (EOFError, KeyboardInterrupt):
                    print("\n[INFO] Auto-confirming due to non-interactive mode")
                    return True
            else:
                # In non-interactive mode, auto-confirm
                print(f"\n[INFO] Auto-confirming: {question}")
                return True
            
        # In bot mode, send a confirmation message with buttons
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await context.bot.send_message(
            chat_id=context._chat_id,
            text=question,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # Store the message ID to handle the response
        if not hasattr(context, 'pending_confirmations'):
            context.pending_confirmations = {}
        context.pending_confirmations[message.message_id] = message
        
        # In a real bot, you'd use conversation handlers here
        # For now, we'll just return True to continue
        return True
    
    def _build_prompt(self, text: str, current_project: Optional[str] = None) -> str:
        """Build the prompt for the LLM"""
        context = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: {current_project}" if current_project else "–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
        
        return f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å: {text}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –µ–≥–æ –≤ –∫–æ–º–∞–Ω–¥—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
1. create_project - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: project_name (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞)
   –ü—Ä–∏–º–µ—Ä: {{"command": "create_project", "params": {{"project_name": "–º–æ–π_–ø—Ä–æ–µ–∫—Ç"}}}}

2. create_file - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: name (–∏–º—è —Ñ–∞–π–ª–∞), content (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
   –ü—Ä–∏–º–µ—Ä: {{"command": "create_file", "params": {{"name": "main.py", "content": "print(\\"Hello, World!\\")"}}}}

3. list_projects - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
   –ü—Ä–∏–º–µ—Ä: {{"command": "list_projects", "params": {{}}}}

4. switch_project - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: project_name (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞)
   –ü—Ä–∏–º–µ—Ä: {{"command": "switch_project", "params": {{"project_name": "–º–æ–π_–ø—Ä–æ–µ–∫—Ç"}}}}

5. list_files - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: path (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞)
   –ü—Ä–∏–º–µ—Ä: {{"command": "list_files", "params": {{"path": "src"}}}}

6. view_file - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: file_path (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
   –ü—Ä–∏–º–µ—Ä: {{"command": "view_file", "params": {{"file_path": "src/main.py"}}}}

7. run_code - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: code (–∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
   –ü—Ä–∏–º–µ—Ä: {{"command": "run_code", "params": {{"code": "print(1+1)"}}}}

8. analyze_code - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: code (–∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
   –ü—Ä–∏–º–µ—Ä: {{"command": "analyze_code", "params": {{"code": "def test(): pass"}}}}

–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:
- –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É view_file
- –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π view_file
- –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π list_files
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ file_path
- –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏ command –∏ params.
"""

    # Command handlers
    async def _handle_view_file(self, context: ContextTypes.DEFAULT_TYPE, **kwargs) -> Tuple[bool, str]:
        """Handle view_file command
        
        Args:
            context: Bot context
            **kwargs: Should contain either 'path' or 'file_path' parameter with the file path
            
        Returns:
            Tuple[bool, str]: Success status and message
        """
        try:
            # Get the file path from either 'path' or 'file_path' parameter
            path = kwargs.get('path') or kwargs.get('file_path')
            
            if not path:
                return False, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                
            # Get the current project
            active_projects = context.bot_data.get('active_projects', {})
            chat_id = getattr(context, '_chat_id', 0)
            current_project = active_projects.get(str(chat_id))
            
            if not current_project:
                return False, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç."
            
            # Build full path
            base_dir = os.path.join("projects", current_project)
            full_path = os.path.normpath(os.path.join(base_dir, path))
            
            # Security check: prevent directory traversal
            if not os.path.abspath(full_path).startswith(os.path.abspath(base_dir)):
                return False, "‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
            
            # Check if file exists
            if not os.path.exists(full_path):
                return False, f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            
            if not os.path.isfile(full_path):
                return False, f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {file_path}"
            
            # Read file content with proper encoding
            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Truncate long content for display
                max_length = 2000
                if len(content) > max_length:
                    content = content[:max_length] + "\n[... —Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω ...]"
                
                # Format the response
                response = (
                    f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_path} –≤ –ø—Ä–æ–µ–∫—Ç–µ {current_project}:\n"
                    f"```\n{content}\n```"
                )
                return True, response
                
            except UnicodeDecodeError:
                return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_path} (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)"
            
        except Exception as e:
            logger.error(f"Error in _handle_view_file: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
            
    async def _handle_create_project(self, context: ContextTypes.DEFAULT_TYPE, **kwargs) -> Tuple[bool, str]:
        """Handle project creation"""
        from core.project.manager import ProjectManager
        from datetime import datetime
        
        # Get the project name from kwargs (can be 'name' or 'project_name')
        name = kwargs.get('name') or kwargs.get('project_name')
        if not name:
            # If no name provided, generate a default one
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            name = f'project_{timestamp}'
            
        # Clean up the name to be filesystem-safe
        import re
        name = re.sub(r'[^\w\-]', '_', name).strip('_').lower()
        if not name:
            name = 'new_project'
            
        project_manager = context.bot_data.get('project_manager')
        if not project_manager:
            return False, "‚ùå ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        try:
            # Create project directory
            project_path = project_manager.get_project_path(name)
            project_path.mkdir(parents=True, exist_ok=True)
            
            # Create project config
            config = {
                'name': name,
                'created_at': str(datetime.now()),
                'description': kwargs.get('description', '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')
            }
            
            config_path = project_path / '.project.json'
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
                
            # Update active project
            chat_id = getattr(context, '_chat_id', 0)
            if chat_id is not None:
                active_projects = context.bot_data.setdefault('active_projects', {})
                active_projects[str(chat_id)] = name
                
            return True, f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ {project_path}"
            
        except Exception as e:
            logger.error(f"Error creating project: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
    
    async def _handle_create_file(self, context: ContextTypes.DEFAULT_TYPE, name: str, content: str = "", **kwargs) -> Tuple[bool, str]:
        """Handle file creation"""
        project_manager = context.bot_data.get('project_manager')
        if not project_manager:
            return False, "‚ùå ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        # Get chat ID (0 for CLI mode)
        chat_id = getattr(context, '_chat_id', 0)
        chat_id_str = str(chat_id)
            
        # Get active project from context or project manager
        active_projects = context.bot_data.get('active_projects', {})
        current_project = active_projects.get(chat_id_str)
        
        # If no active project in context, try to get it from project manager
        if not current_project and project_manager.current_project:
            current_project = project_manager.current_project
            # Update context to keep it in sync
            if 'active_projects' not in context.bot_data:
                context.bot_data['active_projects'] = {}
            context.bot_data['active_projects'][chat_id_str] = current_project
        
        if not current_project:
            return False, "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç."
            
        try:
            # Get project path and create parent directories if needed
            project_path = project_manager.get_project_path(current_project)
            if not project_path or not project_path.exists():
                return False, f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {current_project} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                
            file_path = project_path / name
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Write file with content
            file_path.write_text(content, encoding='utf-8')
            
            return True, f"‚úÖ –§–∞–π–ª {name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ {current_project}"
            
        except Exception as e:
            logger.error(f"Error creating file: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
    
    async def _handle_list_projects(self, context: ContextTypes.DEFAULT_TYPE, **kwargs) -> Tuple[bool, str]:
        """Handle listing all projects"""
        project_manager = context.bot_data.get('project_manager')
        if not project_manager:
            return False, "‚ùå ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        try:
            # Use the projects_dir attribute directly
            projects_dir = project_manager.projects_dir
            if not projects_dir.exists():
                return True, "‚ÑπÔ∏è –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
                
            # List all directories in projects_dir that are valid projects
            projects = []
            for d in projects_dir.iterdir():
                if d.is_dir() and not d.name.startswith('.'):
                    # Check if it's a valid project by looking for config file
                    if (d / '.project.json').exists():
                        projects.append(d.name)
                        
            if not projects:
                return True, "‚ÑπÔ∏è –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
                
            projects_list = "\n".join(f"‚Ä¢ {name}" for name in sorted(projects))
            return True, f"üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n{projects_list}"
            
        except Exception as e:
            logger.error(f"Error listing projects: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}"
    
    async def _handle_switch_project(self, context: ContextTypes.DEFAULT_TYPE, project_name: str = None, **kwargs) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
            project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            Tuple[bool, str]: –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
            project_manager = context.bot_data.get('project_manager')
            if not project_manager:
                logger.error("ProjectManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                return False, "‚ùå –û—à–∏–±–∫–∞: ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ kwargs, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
            if not project_name:
                project_name = kwargs.get('project_name') or kwargs.get('name')
                if not project_name:
                    logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                    return False, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞"
            
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {project_name}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ switch_project –∏–∑ ProjectManager, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if not project_manager.switch_project(project_name):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {project_name}")
                return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç {project_name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞."
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id (0 –¥–ª—è CLI)
            chat_id = getattr(context, '_chat_id', 0)
            chat_id_str = str(chat_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if 'active_projects' not in context.bot_data:
                context.bot_data['active_projects'] = {}
            context.bot_data['active_projects'][chat_id_str] = project_name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            if not hasattr(self, '_active_projects'):
                self._active_projects = {}
            self._active_projects[chat_id_str] = project_name
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {project_name}")
            logger.debug(f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –≤ ProjectManager: {project_manager.current_project}")
            logger.debug(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context.bot_data['active_projects']}")
            
            return True, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {project_name}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {str(e)}"
    
    async def _handle_list_files(self, context: ContextTypes.DEFAULT_TYPE, path: str = ".", **kwargs) -> Tuple[bool, str]:
        """List files in project with detailed information"""
        try:
            import os
            from pathlib import Path
            
            project_manager = context.bot_data.get('project_manager')
            if not project_manager:
                return False, "‚ùå ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # Get chat ID or use default for CLI
            chat_id = getattr(context, '_chat_id', 0)
            chat_id_str = str(chat_id)
            
            # Get active project from context or project manager
            active_projects = context.bot_data.get('active_projects', {})
            current_project = active_projects.get(chat_id_str)
            
            # If no active project in context, try to get it from project manager
            if not current_project and project_manager.current_project:
                current_project = project_manager.current_project
                # Update context to keep it in sync
                if 'active_projects' not in context.bot_data:
                    context.bot_data['active_projects'] = {}
                context.bot_data['active_projects'][chat_id_str] = current_project
            
            if not current_project:
                return False, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /switch_project –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç."
                
            # Get the project directory path
            project_path = project_manager.get_project_path(current_project)
            if not project_path or not project_path.exists():
                return False, f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {current_project} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                
            # Resolve the target path within the project
            target_path = project_path / path
            if not target_path.exists():
                return False, f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"
                
            # List files and directories
            try:
                items = []
                for item in target_path.iterdir():
                    item_path = target_path / item.name
                    item_type = "üìÅ" if item_path.is_dir() else "üìÑ"
                    item_size = f"{item_path.stat().st_size / 1024:.1f} KB" if item_path.is_file() else ""
                    items.append(f"{item_type} {item.name} {item_size}".strip())
                
                if not items:
                    return True, f"üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞: {path if path != '.' else '–∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è'}"
                    
                files_list = "\n".join(sorted(items))
                return True, f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {path if path != '.' else '–∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏'}:\n{files_list}"
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
                return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}"
            if not current_project and project_manager.current_project:
                current_project = project_manager.current_project
                active_projects[chat_id_str] = current_project
                context.bot_data['active_projects'] = active_projects
            
            if not current_project:
                return False, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç."
            
            # Build full path
            base_dir = os.path.join("projects", current_project)
            full_path = os.path.normpath(os.path.join(base_dir, path))
            
            # Security check: prevent directory traversal
            if not os.path.abspath(full_path).startswith(os.path.abspath(base_dir)):
                return False, "‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å"
            
            # Check if path exists
            if not os.path.exists(full_path):
                return False, f"‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"
            
            # Check if it's a directory
            if not os.path.isdir(full_path):
                return False, f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {path}"
            
            # List files with details
            from datetime import datetime
            import stat
            
            files = []
            dirs = []
            
            for item in os.scandir(full_path):
                try:
                    stat_info = item.stat()
                    size = stat_info.st_size
                    mtime = datetime.fromtimestamp(stat_info.st_mtime)
                    
                    # Format size
                    if size < 1024:
                        size_str = f"{size} B"
                    elif size < 1024 * 1024:
                        size_str = f"{size/1024:.1f} KB"
                    else:
                        size_str = f"{size/(1024*1024):.1f} MB"
                    
                    # Format permissions
                    mode = stat_info.st_mode
                    perms = ""
                    for who in "USR", "GRP", "OTH":
                        for what in "R", "W", "X":
                            if mode & getattr(stat, f"S_I{what}{who}"):
                                perms += what.lower()
                            else:
                                perms += "-"
                    
                    entry = {
                        'name': item.name,
                        'is_dir': item.is_dir(),
                        'size': size_str,
                        'mtime': mtime.strftime("%Y-%m-%d %H:%M"),
                        'perms': perms
                    }
                    
                    if item.is_dir():
                        dirs.append(entry)
                    else:
                        files.append(entry)
                        
                except Exception as e:
                    logger.warning(f"Error getting info for {item.name}: {e}")
            
            # Sort directories first, then files, both alphabetically
            dirs.sort(key=lambda x: x['name'].lower())
            files.sort(key=lambda x: x['name'].lower())
            
            # Format output
            output = [f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path} –≤ –ø—Ä–æ–µ–∫—Ç–µ {current_project}\n"]
            
            # Add parent directory link if not root
            if path != ".":
                parent_dir = os.path.dirname(path)
                if parent_dir == "":
                    parent_dir = "."
                output.append(f"üìÅ [..] (–ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é)")
            
            # Add directories
            for d in dirs:
                output.append(
                    f"üìÅ {d['name']}/\t"
                    f"{d['mtime']}  {d['size']:>8}  {d['perms']}"
                )
            
            # Add files
            for f in files:
                output.append(
                    f"üìÑ {f['name']}\t"
                    f"{f['mtime']}  {f['size']:>8}  {f['perms']}"
                )
            
            if not dirs and not files:
                output.append("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            
            return True, "\n".join(output)
            
        except Exception as e:
            logger.error(f"Error listing files: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"""
    
    async def _handle_view_file(self, context: ContextTypes.DEFAULT_TYPE, **kwargs) -> Tuple[bool, str]:
        """View file contents with enhanced error handling
        
        Args:
            context: Bot context containing project manager and active projects
            **kwargs: Should contain either 'path' or 'file_path' parameter with the file path
            
        Returns:
            Tuple[bool, str]: Success status and detailed message
        """
        try:
            # Get the file path from either 'path' or 'file_path' parameter
            path = kwargs.get('path') or kwargs.get('file_path')
            
            if not path:
                logger.warning("No file path provided in view_file command")
                return False, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/view_file test.py`"
                
            logger.info(f"Attempting to view file: {path}")
            
            # Get project manager
            project_manager = context.bot_data.get('project_manager')
            if not project_manager:
                error_msg = "ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤."
                logger.error(error_msg)
                return False, f"‚ùå {error_msg}"
                
            # Get active project
            active_projects = context.bot_data.get('active_projects', {})
            chat_id = getattr(context, '_chat_id', 0)
            chat_id_str = str(chat_id)
            
            if not active_projects or chat_id_str not in active_projects:
                error_msg = "–ù–µ –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç."
                logger.warning(f"{error_msg} Chat ID: {chat_id}")
                return False, (
                    "‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã:\n"
                    "‚Ä¢ `/create_project –∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞` - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
                    "‚Ä¢ `/switch_project –∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç"
                )
                
            current_project = active_projects[chat_id_str]
            logger.info(f"Current project for chat {chat_id}: {current_project}")
            
            # Get project path
            project_path = project_manager.get_project_path()
            if not project_path or not project_path.exists():
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞: {project_path}"
                logger.error(error_msg)
                return False, f"‚ùå {error_msg}"
                
            # Build full file path
            try:
                file_path = (project_path / path).resolve()
                
                # Security check: ensure the file is within the project directory
                if not file_path.is_relative_to(project_path):
                    error_msg = f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞: {file_path}"
                    logger.warning(error_msg)
                    return False, f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {error_msg}"
                    
            except Exception as e:
                error_msg = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {path}"
                logger.error(f"{error_msg}: {e}", exc_info=True)
                return False, f"‚ùå {error_msg}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏."
            
            # Check if file exists and is not a directory
            if not file_path.exists():
                return False, (
                    f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: `{path}`\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –§–∞–π–ª `{path}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                    "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/list_files`"
                )
                
            if file_path.is_dir():
                return False, (
                    f"‚ùå –£–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: `{path}`\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/list_files {path}` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."
                )
            
            # Read file content
            try:
                content = file_path.read_text(encoding='utf-8')
                file_size = file_path.stat().st_size
                
                # Truncate very large files
                max_size = 100 * 1024  # 100KB
                truncated = False
                if file_size > max_size:
                    content = content[:max_size] + "\n\n[–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞–Ω–æ. –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è]"
                    truncated = True
                
                response = [
                    f"üìÑ *{path}* ({file_size} –±–∞–π—Ç)",
                    "```" + ("python" if path.endswith(".py") else ""),
                    content,
                    "```"
                ]
                
                if truncated:
                    response.append(f"\n_–§–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω. –ü–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç_")
                
                return True, "\n".join(response)
                
            except UnicodeDecodeError:
                return False, (
                    f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª `{path}` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º.\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."
                )
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
                logger.error(f"{error_msg} (file: {file_path})", exc_info=True)
                return False, f"‚ùå {error_msg}"
                
        except Exception as e:
            error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            logger.error(error_msg, exc_info=True)
            return False, f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    async def _handle_run_code(self, context: ContextTypes.DEFAULT_TYPE, code: str = "", file: str = "", **kwargs) -> Tuple[bool, str]:
        """Run Python code"""
        if not code and not file:
            return False, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            
        if file:
            project_manager = context.bot_data.get('project_manager')
            if not project_manager:
                return False, "‚ùå ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                
            file_path = project_manager.get_project_path() / file
            if not file_path.exists():
                return False, f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}"
                
            try:
                code = file_path.read_text(encoding='utf-8')
            except Exception as e:
                return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        
        # Here you would typically run the code in a safe environment
        # For now, we'll just return the code that would be executed
        return True, f"```python\n# –ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{code}\n```"
    
    async def _analyze_python_file(self, file_path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            content = file_path.read_text(encoding='utf-8')
            lines = content.splitlines()
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'file': str(file_path.name),
                'lines': len(lines),
                'empty_lines': sum(1 for line in lines if not line.strip()),
                'comment_lines': sum(1 for line in lines if line.strip().startswith('#')),
                'imports': [],
                'functions': [],
                'classes': [],
                'has_docstrings': False,
                'has_tests': any('test' in file_path.name.lower() or 'test_' in file_path.stem.lower() for file_path in [file_path])
            }
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
            in_docstring = False
            in_function = False
            in_class = False
            
            for line in lines:
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if not line or line.startswith('#'):
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
                if line.startswith(('import ', 'from ')):
                    stats['imports'].append(line)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
                elif line.startswith('class '):
                    stats['classes'].append(line.split('(')[0].replace('class ', '').strip())
                    in_class = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                elif line.startswith('def '):
                    stats['functions'].append(line.split('(')[0].replace('def ', '').strip())
                    in_function = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º docstrings
                if '"""' in line or "'''" in line:
                    if not in_docstring:
                        stats['has_docstrings'] = True
                    in_docstring = not in_docstring
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return {'error': str(e), 'file': str(file_path.name)}
    
    async def _analyze_project_structure(self, project_path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        analysis = {
            'total_files': 0,
            'file_types': {},
            'python_files': [],
            'requirements_files': [],
            'has_requirements': False,
            'has_readme': False,
            'has_license': False,
            'has_git': False,
            'directories': []
        }
        
        try:
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
            for item in project_path.rglob('*'):
                if item.is_file():
                    analysis['total_files'] += 1
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    ext = item.suffix.lower()
                    analysis['file_types'][ext] = analysis['file_types'].get(ext, 0) + 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if item.name.lower() == 'requirements.txt':
                        analysis['requirements_files'].append(str(item.relative_to(project_path)))
                        analysis['has_requirements'] = True
                    elif item.name.lower() == 'readme.md':
                        analysis['has_readme'] = True
                    elif item.name.lower() in ['license', 'license.txt', 'license.md']:
                        analysis['has_license'] = True
                    elif item.name == '.git' and item.is_dir():
                        analysis['has_git'] = True
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Python —Ñ–∞–π–ª—ã
                    if ext == '.py':
                        analysis['python_files'].append(str(item.relative_to(project_path)))
                
                elif item.is_dir() and item.name not in ['__pycache__', '.git', '.idea', 'venv', 'env']:
                    analysis['directories'].append(str(item.relative_to(project_path)))
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return {'error': str(e)}
    
    async def _generate_analysis_report(self, project_name: str, structure: Dict[str, Any], 
                                     code_stats: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ–µ–∫—Ç–∞"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report = [
            f"# üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: *{project_name}*\n",
            "## üìÇ –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º
        report.append(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {structure['total_files']}")
        if structure['file_types']:
            report.append("‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:")
            for ext, count in sorted(structure['file_types'].items(), key=lambda x: x[1], reverse=True):
                report.append(f"  - {ext if ext else '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'}: {count}")
        
        # Python-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        python_files = [f for f in code_stats if not f.get('error')]
        if python_files:
            total_lines = sum(f['lines'] for f in python_files)
            total_functions = sum(len(f.get('functions', [])) for f in python_files)
            total_classes = sum(len(f.get('classes', [])) for f in python_files)
            
            report.extend([
                "\n## üêç Python-–∫–æ–¥",
                f"‚Ä¢ –§–∞–π–ª–æ–≤ —Å –∫–æ–¥–æ–º: {len(python_files)}",
                f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines}",
                f"‚Ä¢ –§—É–Ω–∫—Ü–∏–π: {total_functions}",
                f"‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {total_classes}",
                f"‚Ä¢ –§–∞–π–ª–æ–≤ —Å —Ç–µ—Å—Ç–∞–º–∏: {sum(1 for f in python_files if f.get('has_tests'))}",
                f"‚Ä¢ –§–∞–π–ª–æ–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {sum(1 for f in python_files if f.get('has_docstrings'))}"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = ["\n## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
        
        if not structure['has_readme']:
            recommendations.append("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª README.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞")
        
        if not structure['has_requirements']:
            recommendations.append("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª requirements.txt —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
        
        if not structure['has_license']:
            recommendations.append("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª LICENSE —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π")
            
        if not any(f.get('has_tests') for f in python_files):
            recommendations.append("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞")
            
        if recommendations:
            report.extend(recommendations)
        
        return "\n".join(report)
    
    async def _handle_analyze_project(self, context: ContextTypes.DEFAULT_TYPE, **kwargs) -> Tuple[bool, str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            Tuple[bool, str]: –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
        """
        try:
            project_manager = context.bot_data.get('project_manager')
            if not project_manager or not project_manager.current_project:
                return False, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç."
                
            project_name = project_manager.current_project
            project_path = project_manager.get_project_path(project_name)
            
            if not project_path or not project_path.exists():
                error_msg = f"Project directory not found: {project_path}"
                logger.error(error_msg)
                return False, f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_path}"
            
            logger.info(f"Analyzing project: {project_name} at {project_path}")
            
            # Initialize project analyzer
            from core.project.analyzer import ProjectAnalyzer
            analyzer = ProjectAnalyzer(project_path)
            
            # Analyze project
            analysis = analyzer.analyze_project()
            logger.debug(f"Project analysis result: {analysis}")
            
            if 'error' in analysis:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞: {analysis['error']}"
                logger.error(error_msg)
                return False, f"‚ùå {error_msg}"
            
            # Format the analysis results
            response = [
                f"üìä *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}*\n",
                f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: `{project_path}`"
            ]
            
            # Add statistics if available
            if 'stats' in analysis and analysis['stats']:
                stats = analysis['stats']
                response.extend([
                    "\n*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*",
                    f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats.get('total_files', 0)}",
                    f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self._format_size(stats.get('total_size', 0))}",
                    f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {stats.get('dir_count', 0)}"
                ])
            
            # Add file structure if available
            if 'structure' in analysis and analysis['structure']:
                structure = analysis['structure']
                response.append("\n*üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:*")
                
                # Helper function to get file description
                def get_file_description(file_name: str) -> str:
                    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–º–µ–Ω–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
                    file_lower = file_name.lower()
                    
                    if file_name == 'README.md':
                        return " - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
                    elif file_name == 'requirements.txt':
                        return " - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"
                    elif file_name == 'setup.py':
                        return " - –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞"
                    elif file_name == '.gitignore':
                        return " - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã Git"
                    elif file_name == '.env':
                        return " - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
                    elif file_name.endswith('.py'):
                        if file_name == 'main.py':
                            return " - –ì–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª"
                        elif file_name.startswith('test_'):
                            return " - –¢–µ—Å—Ç—ã"
                        return " - Python –º–æ–¥—É–ª—å"
                    elif file_name.endswith('.json'):
                        return " - –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JSON"
                    elif file_name.endswith(('.yaml', '.yml')):
                        return " - –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML"
                    elif file_name.endswith('.md'):
                        return " - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
                    return ""
                
                # Helper function to get directory description
                def get_directory_description(dir_name: str) -> str:
                    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
                    dir_lower = dir_name.lower()
                    
                    if dir_lower in ('src', 'source'):
                        return " - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                    elif dir_lower == 'tests':
                        return " - –¢–µ—Å—Ç—ã"
                    elif dir_lower in ('docs', 'documentation'):
                        return " - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
                    elif dir_lower in ('config', 'conf'):
                        return " - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
                    elif dir_lower in ('static', 'assets'):
                        return " - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
                    elif dir_lower == 'templates':
                        return " - HTML —à–∞–±–ª–æ–Ω—ã"
                    elif dir_lower == 'migrations':
                        return " - –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
                    return ""
                
                # Helper function to flatten the tree structure
                def get_structure_items(node, prefix=''):
                    items = []
                    name = node.get('name', '')
                    node_type = node.get('type', '')
                    
                    if node_type == 'file':
                        description = get_file_description(name)
                        items.append(f"{prefix}üìÑ {name}{description}")
                    elif node_type == 'directory':
                        description = get_directory_description(name)
                        items.append(f"{prefix}üìÅ {name}/{description}")
                        for child in node.get('children', [])[:5]:  # Show first 5 items per directory
                            items.extend(get_structure_items(child, prefix + '  '))
                        if len(node.get('children', [])) > 5:
                            items.append(f"{prefix}  ... –∏ –µ—â–µ {len(node['children']) - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    elif node_type == '...':
                        items.append(f"{prefix}... (–≥–ª—É–±–∏–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞)")
                    return items
                
                # Add the top-level structure items
                structure_items = get_structure_items(structure)
                response.extend(structure_items[:15])  # Show first 15 items total
                if len(structure_items) > 15:
                    response.append("... –∏ –µ—â–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_files –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞)")
            
            # Add project summary if available
            if 'summary' in analysis and analysis['summary']:
                summary = analysis['summary']
                response.extend([
                    "\n*üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:*",
                    f"‚Ä¢ *–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:* {summary.get('project_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}",
                    f"‚Ä¢ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* {summary.get('created_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    f"‚Ä¢ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:* {summary.get('modified_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    f"‚Ä¢ *–£—Ä–æ–≤–µ–Ω—å –∑—Ä–µ–ª–æ—Å—Ç–∏:* {summary.get('maturity', {}).get('level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({summary.get('maturity', {}).get('score', 0)}/{summary.get('maturity', {}).get('max_score', 10)})",
                    f"‚Ä¢ *–û–ø–∏—Å–∞–Ω–∏–µ:* {summary.get('maturity', {}).get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}",
                    "\n*üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é:*"
                ])
                
                # Add recommendations or a message if none
                recommendations = summary.get('recommendations', [])
                if recommendations:
                    for i, rec in enumerate(recommendations, 1):
                        response.append(f"{i}. {rec}")
                else:
                    response.append("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–µ–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.")
            
            return True, '\n'.join(response)
            
        except Exception as e:
            error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            logger.error(error_msg, exc_info=True)
            return False, f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    def _format_size(self, size_bytes: int) -> str:
        """Format file size in human-readable format"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"
    
    async def _handle_analyze_code(self, context: ContextTypes.DEFAULT_TYPE, code: str = "", file: str = "", **kwargs) -> Tuple[bool, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞"""
        if not code and not file:
            return False, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
        if file:
            project_manager = context.bot_data.get('project_manager')
            if not project_manager:
                return False, "‚ùå ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                
            file_path = project_manager.get_project_path() / file
            if not file_path.exists():
                return False, f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}"
                
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    code = f.read()
            except Exception as e:
                return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        
        # Simple code analysis
        lines = code.count('\n') + 1
        chars = len(code)
        
        analysis = f"""üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:
‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {lines}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {chars}
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {'–ù–∏–∑–∫–∏–π' if lines < 50 else '–°—Ä–µ–¥–Ω–∏–π' if lines < 200 else '–í—ã—Å–æ–∫–∏–π'}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{'–ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.' if lines < 100 else '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥—É–ª–∏.'}
{'–î–æ–±–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–ª–∞—Å—Å–∞–º.' if 'def ' in code or 'class ' in code and '"""' not in code else ''}
"""
        
        return True, analysis

# Global instance
nlp_processor = NLPProcessor()
