#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π AI —á–∞—Ç –¥–ª—è CLI
"""
import asyncio
import os
import sys
from pathlib import Path

# Add the project root to the Python path
project_root = str(Path(__file__).parent.absolute())
sys.path.insert(0, project_root)

from core.ai.ai_router import ask

class AIChat:
    def __init__(self, model: str = "hf_deepseek"):
        self.model = model
        self.conversation_history = []
        self.commands = {
            "/help": self.show_help,
            "/clear": self.clear_history,
            "/history": self.show_history,
            "/model": self.switch_model,
            "/analyze": self.analyze_file,
            "/exit": self.exit_chat,
            "/quit": self.exit_chat
        }
        
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        print("\nü§ñ AI Assistant - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("=" * 40)
        print("/help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("/clear    - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        print("/history  - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞") 
        print("/model    - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å AI –º–æ–¥–µ–ª—å")
        print("/analyze <file> - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
        print("/exit     - –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
        print("/quit     - –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
        print("=" * 40)
        print("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI")
        
    def clear_history(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.conversation_history = []
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞")
        
    def show_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not self.conversation_history:
            print("üìù –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—É—Å—Ç–∞")
            return
            
        print("\nüìù –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:")
        print("=" * 50)
        for i, msg in enumerate(self.conversation_history, 1):
            role = "üßë –í—ã" if msg["role"] == "user" else "ü§ñ AI"
            print(f"{i}. {role}: {msg['content'][:100]}...")
        print("=" * 50)
        
    def switch_model(self, model_name: str = None):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å AI –º–æ–¥–µ–ª—å"""
        if not model_name:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            print("- hf_deepseek (DeepSeek - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)")
            print("- kimi (Kimi - –±—ã—Å—Ç—Ä—ã–π)")
            print("- gigachat (GigaChat)")
            print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /model <–∏–º—è_–º–æ–¥–µ–ª–∏>")
            return
            
        if model_name in ["hf_deepseek", "kimi", "gigachat"]:
            self.model = model_name
            os.environ["PROVIDER"] = model_name
            print(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {model_name}")
            
    async def analyze_file(self, file_path: str = None):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        if not file_path:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: /analyze <file_path>")
            return
            
        try:
            if not os.path.exists(file_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return
                
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {file_path}")
            
            messages = [{"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ {file_path}:\n\n{content}"}]
            result = await ask(messages)
            
            print("\n" + "="*50)
            print("üìä –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê:")
            print("="*50)
            print(result)
            print("="*50)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
            
    def exit_chat(self):
        """–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞"""
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
        
    async def process_command(self, user_input: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        parts = user_input.strip().split()
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if command in self.commands:
            if command == "/analyze":
                await self.analyze_file(args[0] if args else None)
            elif command == "/model":
                self.switch_model(args[0] if args else None)
            else:
                self.commands[command]()
            return True
        return False
        
    async def chat_with_ai(self, user_message: str):
        """–û–±—â–µ–Ω–∏–µ —Å AI"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "user", "content": user_message})
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.conversation_history) > 10:
                self.conversation_history = self.conversation_history[-10:]
                
            print("ü§ñ AI –¥—É–º–∞–µ—Ç...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
            result = await ask(self.conversation_history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "assistant", "content": result})
            
            print(f"\nü§ñ AI ({self.model}):")
            print("-" * 40)
            print(result)
            print("-" * 40)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å AI: {e}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –≤ .env —Ñ–∞–π–ª–µ")
            
    async def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"""
        os.environ["PROVIDER"] = self.model
        
        print("ü§ñ AI Code Assistant - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
        print("=" * 50)
        print(f"–ú–æ–¥–µ–ª—å: {self.model}")
        print("–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("=" * 50)
        
        while True:
            try:
                user_input = input("\nüßë –í—ã: ").strip()
                
                if not user_input:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if user_input.startswith('/'):
                    await self.process_command(user_input)
                else:
                    await self.chat_with_ai(user_input)
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except EOFError:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    model = "hf_deepseek"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] in ["--model", "-m"] and len(sys.argv) > 2:
            model = sys.argv[2]
        elif sys.argv[1] in ["--help", "-h"]:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 ai_chat.py [--model MODEL]")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: hf_deepseek, kimi, gigachat")
            return
            
    chat = AIChat(model)
    asyncio.run(chat.run())

if __name__ == "__main__":
    main()