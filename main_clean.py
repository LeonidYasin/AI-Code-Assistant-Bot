#!/usr/bin/env python3
"""
Main entry point for the AI Code Assistant bot.

This module initializes the bot and sets up all command handlers.
"""
import asyncio
import json
import logging
import os
import sys
from pathlib import Path

# Add the project root to the Python path
project_root = str(Path(__file__).parent.absolute())
sys.path.insert(0, project_root)

# Set up console encoding first
from core.utils.encoding_utils import setup_console_encoding, configure_logging, safe_print
setup_console_encoding()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Apply safe logging configuration
configure_logging()

# Import core bot components
from core.bot.application import BotApplication

# Import and register modules
from handlers import register_handlers

def get_help_text() -> str:
    """Get the help text for the CLI."""
    return """
ü§ñ AI Code Assistant - –ü–æ–º–æ—â–Ω–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∏ –æ–±—ã—á–Ω—ã–π —è–∑—ã–∫.

üìÇ –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ projects/. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:
‚Ä¢ /list_projects - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ /create_project name=–∏–º—è - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /switch_project name=–∏–º—è - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /project_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
‚Ä¢ /list_files - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ

üìù –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:
‚Ä¢ /view_file path=–ø—É—Ç—å - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª
‚Ä¢ /create_file path=–ø—É—Ç—å [content=—Ç–µ–∫—Å—Ç] - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
‚Ä¢ /run_script path=–ø—É—Ç—å - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç

ü§ñ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:
‚Ä¢ /analyze_code path=–ø—É—Ç—å - –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
‚Ä¢ /analyze_project - –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

üîß –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /run_code code=–∫–æ–¥ - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥
‚Ä¢ /run_code file=–ø—É—Ç—å - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞

‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:
  -h, --help    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
  -v, --version –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é
"""

def show_cli_help():
    """Display CLI help information"""
    print(get_help_text())

class CLIContext:
    """Simple context class for CLI mode."""
    def __init__(self):
        self.bot_data = {}
        self._chat_id = 0
        self.args = []

    @property
    def chat_id(self):
        return self._chat_id

def is_direct_command(command: str) -> bool:
    """Check if the command is a direct command (starts with /)."""
    return command.startswith('/')

async def _process_direct_command(command: str, bot) -> int:
    """Process a direct CLI command (starts with /)."""
    # Remove leading slash and split into parts
    command_parts = command[1:].split()
    if not command_parts:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ —Å–ª—ç—à–∞")
        return 1
        
    command_name = command_parts[0].lower()
    params = {}
    
    # Parse parameters from command line arguments
    for arg in command_parts[1:]:
        if '=' in arg:
            key, value = arg.split('=', 1)
            # Try to convert value to appropriate type
            if value.lower() == 'true':
                value = True
            elif value.lower() == 'false':
                value = False
            elif value.isdigit():
                value = int(value)
            elif value.replace('.', '', 1).isdigit() and value.count('.') < 2:
                value = float(value)
            params[key] = value
        else:
            # For simple flags without values, assume boolean True
            params[arg] = True
    
    # Get project manager for direct command execution
    project_manager = bot.project_manager
    chat_id = 0  # Use 0 for CLI commands
    
    try:
        # Map commands to their handlers
        if command_name == 'list_projects':
            success, result = project_manager.list_projects()
            if success:
                response = ["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:"]
                for i, project in enumerate(result, 1):
                    status = "‚úÖ" if project.get('has_config', False) else "‚ö†Ô∏è"
                    config_status = "" if project.get('has_config', False) else " (–±–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
                    response.append(
                        f"{i}. {status} {project['name']}{config_status}\n"
                        f"   üìÅ {project['path']}"
                    )
                print("\n" + "\n".join(response))
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result}")
            return 0 if success else 1
            
        elif command_name == 'create_project':
            if 'name' not in params:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã create_project —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä name")
                return 1
                
            success, result = project_manager.create_project(params['name'])
            if success:
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{params['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                print(f"üìÅ –ü—É—Ç—å: {result}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {result}")
            return 0 if success else 1
            
        elif command_name == 'switch_project':
            if 'name' not in params:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã switch_project —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä name")
                return 1
                
            success, result = project_manager.switch_project(params['name'])
            if success:
                print(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {params['name']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {result}")
            return 0 if success else 1
            
        elif command_name == 'project_info':
            success, result = project_manager.get_project_info()
            if success:
                print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:")
                print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"–ü—É—Ç—å: {result.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                print(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {result.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
                print(f"–†–∞–∑–º–µ—Ä: {result.get('size', '0')}")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {result.get('file_count', 0)}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ: {result}")
            return 0 if success else 1
            
        elif command_name == 'list_files':
            path = params.get('path', '.')
            success, result = project_manager.list_files(path)
            if success:
                if not result:
                    print("‚ÑπÔ∏è –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
                    return 0
                    
                print(f"üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ ({path}):")
                for file in result:
                    print(f"- {file}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {result}")
            return 0 if success else 1
            
        elif command_name == 'view_file':
            if 'path' not in params:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã view_file —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä path")
                return 1
                
            success, result = project_manager.view_file(params['path'])
            if success:
                print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {params['path']}:")
                print("-" * 50)
                print(result)
                print("-" * 50)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {result}")
            return 0 if success else 1
            
        elif command_name == 'create_file':
            if 'path' not in params:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã create_file —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä path")
                return 1
                
            content = params.get('content', '')
            success, result = project_manager.create_file(params['path'], content)
            if success:
                print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {params['path']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {result}")
            return 0 if success else 1
            
        elif command_name == 'run_script':
            if 'path' not in params:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã run_script —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä path")
                return 1
                
            success, result = project_manager.run_script(params['path'])
            if success:
                print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
                print(result)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {result}")
            return 0 if success else 1
            
        elif command_name == 'run_code':
            if 'code' not in params and 'file' not in params:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã run_code —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä code –∏–ª–∏ file")
                return 1
                
            if 'file' in params:
                print(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞: {params['file']}")
                success, result = project_manager.run_script(params['file'])
            else:
                print("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
                success, result = project_manager.execute_code(params['code'])
                
            if success:
                print("‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
                print(result)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {result}")
            return 0 if success else 1
            
        elif command_name == 'analyze_code':
            if 'path' not in params:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã analyze_code —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä path")
                return 1
                
            print("üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞...")
            try:
                # Get the file content first
                success, file_content = project_manager.view_file(params['path'])
                if not success:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_content}")
                    return 1
                
                print("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ –ò–ò...")
                # Use the project AI for analysis
                project_ai = bot.get_project_ai(chat_id)
                success, result = await project_ai.analyze_code(params['path'])
                
                if success:
                    print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:")
                    print("="*50)
                    print(result)
                    print("="*50)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {result}")
                return 0 if success else 1
                
            except Exception as e:
                print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {str(e)}")
                import traceback
                traceback.print_exc()
                return 1
            
        elif command_name == 'analyze_project':
            print("üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ–µ–∫—Ç–∞...")
            try:
                # Get project info first
                success, project_info = project_manager.get_project_info()
                if not success:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ: {project_info}")
                    return 1
                
                print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {project_info.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')}")
                print(f"üìÅ –ü—É—Ç—å: {project_info.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                print("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ –ò–ò...")
                
                # Use the project AI for analysis
                project_ai = bot.get_project_ai(chat_id)
                success, result = await project_ai.analyze_project()
                
                if success:
                    print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
                    print("="*50)
                    print(result)
                    print("="*50)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞: {result}")
                return 0 if success else 1
                
            except Exception as e:
                print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
                import traceback
                traceback.print_exc()
                return 1
            
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  /list_projects - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
            print("  /create_project name=–∏–º—è - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
            print("  /switch_project name=–∏–º—è - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
            print("  /project_info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ")
            print("  /list_files [path=–ø—É—Ç—å] - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ")
            print("  /view_file path=–ø—É—Ç—å - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
            print("  /create_file path=–ø—É—Ç—å [content=—Ç–µ–∫—Å—Ç] - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")
            print("  /run_script path=–ø—É—Ç—å - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
            print("  /run_code code=–∫–æ–¥ - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥")
            print("  /run_code file=–ø—É—Ç—å - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞")
            print("  /analyze_code path=–ø—É—Ç—å - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
            print("  /analyze_project - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç")
            return 1
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1

async def process_cli_command(bot) -> int:
    """Process the CLI command."""
    if len(sys.argv) < 2:
        show_cli_help()
        return 0
        
    command = sys.argv[1]
    
    # Handle help command
    if command.lower() in ('help', '--help', '-h'):
        show_cli_help()
        return 0
        
    # Handle version command
    if command.lower() in ('--version', '-v'):
        from core import __version__
        print(f"AI Code Assistant v{__version__}")
        return 0
        
    # Handle direct commands (those starting with /)
    if is_direct_command(command):
        return await _process_direct_command(command, bot)
        
    # For non-direct commands, proceed with normal processing
    return await _process_non_direct_command(bot, command)

async def _process_non_direct_command(bot, command: str) -> int:
    """Process non-direct CLI commands (legacy format)."""
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
    # Add your non-direct command processing logic here
    return 0

async def run_cli() -> int:
    """Run the bot in CLI mode."""
    try:
        # Initialize the bot
        bot = BotApplication()
        
        # Initialize project manager if needed
        if not hasattr(bot, 'project_manager'):
            from core.project.manager import ProjectManager
            # Use the bot's base directory as the base path
            base_dir = Path(__file__).parent.absolute()
            bot.project_manager = ProjectManager(base_dir)
            
            # Set a default project for CLI mode
            default_project = 'default_cli_project'
            bot.project_manager.current_project = default_project
            
            # Create projects directory if it doesn't exist
            projects_dir = base_dir / 'projects'
            projects_dir.mkdir(exist_ok=True, parents=True)
        
        # Process the command
        return await process_cli_command(bot)
    except Exception as e:
        logger.error(f"Error in CLI mode: {e}", exc_info=True)
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1

def main():
    """Main entry point for the application."""
    # Check if running in CLI mode
    if len(sys.argv) > 1:
        return asyncio.run(run_cli())
    
    # Otherwise, run in bot mode
    from core.bot.bot import main as run_bot
    return run_bot()

def run():
    """Run the application."""
    try:
        return main()
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return 0

if __name__ == "__main__":
    sys.exit(run())
