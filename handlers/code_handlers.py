"""Handlers for code analysis and execution."""
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from typing import Dict, Any, Optional, List, Tuple
import logging

from handlers.base import BaseHandler
from core.project.manager import ProjectManager

logger = logging.getLogger(__name__)

class CodeHandler(BaseHandler):
    """Handler for code analysis and execution."""
    
    def __init__(self, project_manager: ProjectManager):
        super().__init__()
        self.project_manager = project_manager
    
    def get_commands(self) -> Dict[str, dict]:
        """Return supported commands and their handlers."""
        return {
            'analyze': {
                'description': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥',
                'handler': self.handle_analyze_code,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze <–∫–æ–¥>\n"
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥."
                )
            },
            'analyze_file': {
                'description': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º',
                'handler': self.handle_analyze_file,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze_file <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>\n"
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."
                )
            },
            'analyze_project': {
                'description': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç',
                'handler': self.handle_analyze_project,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze_project\n"
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç."
                )
            },
            'run': {
                'description': '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç',
                'handler': self.handle_run_script,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /run <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]\n"
                    "–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç."
                )
            },
            'cmd': {
                'description': '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –æ–±–æ–ª–æ—á–∫–µ',
                'handler': self.handle_shell_command,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cmd <–∫–æ–º–∞–Ω–¥–∞>\n"
                    "–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –æ–±–æ–ª–æ—á–∫–µ."
                )
            }
        }
    
    async def handle_analyze_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle analyze code command."""
        if not self._check_project_selected(update):
            return None
            
        if not context.args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: /analyze <–∫–æ–¥>"
            
        code = ' '.join(context.args)
        success, result = self.project_manager.analyze_code(code, is_content=True)
        
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {result}"
            
        return f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:\n\n{result}"
    
    async def handle_analyze_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle analyze file command."""
        if not self._check_project_selected(update):
            return None
            
        if not context.args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: /analyze_file <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>"
            
        file_path = ' '.join(context.args)
        success, result = self.project_manager.analyze_code(file_path)
        
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {result}"
            
        return f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {file_path}:\n\n{result}"
    
    async def handle_analyze_project(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle analyze project command."""
        if not self._check_project_selected(update):
            return None
            
        success, result = self.project_manager.analyze_project()
        
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {result}"
            
        return f"üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:\n\n{result}"
    
    async def handle_run_script(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle run script command."""
        if not self._check_project_selected(update):
            return None
            
        if not context.args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É: /run <–ø—É—Ç—å_–∫_—Å–∫—Ä–∏–ø—Ç—É> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]"
            
        script_path = context.args[0]
        args = context.args[1:] if len(context.args) > 1 else []
        
        success, result = self.project_manager.run_script(script_path, args)
        
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {result}"
            
        return f"üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {script_path}:\n\n{result}"
    
    async def handle_shell_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle shell command execution."""
        if not self._check_project_selected(update):
            return None
            
        if not context.args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /cmd <–∫–æ–º–∞–Ω–¥–∞>"
            
        command = ' '.join(context.args)
        success, result = self.project_manager.execute_command(command)
        
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {result}"
            
        return f"üíª –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã '{command}':\n\n{result}"
    
    def _check_project_selected(self, update: Update) -> bool:
        """Check if a project is selected."""
        if not self.project_manager.current_project:
            update.message.reply_text(
                "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: /project switch <–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞>"
            )
            return False
        return True
