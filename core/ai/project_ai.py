from typing import Dict, Any, Optional, List, Tuple
import json
import logging
from pathlib import Path

from core.project.manager import ProjectManager

logger = logging.getLogger(__name__)

class ProjectAI:
    def __init__(self, llm_client, project_manager: ProjectManager):
        self.llm = llm_client
        self.pm = project_manager
        
    async def process_request(self, user_request: str) -> Tuple[bool, str]:
        """Process user request and return (success, response)"""
        try:
            # First, analyze the request to determine the action
            action = await self._determine_action(user_request)
            
            if action["action"] == "list_files":
                return await self._handle_list_files()
                
            elif action["action"] == "read_file":
                return await self._handle_read_file(action["file_path"])
                
            elif action["action"] == "write_file":
                return await self._handle_write_file(
                    action["file_path"], 
                    action["content"],
                    action.get("overwrite", False)
                )
                
            elif action["action"] == "execute_script":
                return await self._handle_execute_script(action["file_path"])
                
            elif action["action"] == "analyze_code":
                return await self._handle_analyze_code(
                    action["code"], 
                    action.get("context", "")
                )
                
            else:
                return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å."
                
        except Exception as e:
            logger.error(f"Error processing request: {e}", exc_info=True)
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
    
    async def _determine_action(self, user_request: str) -> Dict[str, Any]:
        """Use LLM to determine the action from user request"""
        prompt = (
            "–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞. "
            "–ü—Ä–æ–µ–∫—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. "
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π JSON —Å –ø–æ–ª—è–º–∏:\n"
            "- 'action': –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (create_project, switch_project, list_projects, "
            "list_files, read_file, write_file, execute_script, analyze_code, unknown)\n"
            "- 'project_name': –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n"
            "- 'file_path': –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n"
            "- 'content': —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n"
            "- 'overwrite': –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª (true/false, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)\n"
            "- 'code': –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n"
            "- 'needs_confirmation': —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (true/false)\n"
            "- 'confirmation_message': —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ needs_confirmation=true)\n"
            "- 'context': –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "1. –ó–∞–ø—Ä–æ—Å: '–°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç TestProject'\n"
            "–û—Ç–≤–µ—Ç: {\"action\": \"create_project\", \"project_name\": \"TestProject\", "
            "\"needs_confirmation\": true, \"confirmation_message\": \"–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç TestProject?\"}\n\n"
            "2. –ó–∞–ø—Ä–æ—Å: '–ü–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ'\n"
            "–û—Ç–≤–µ—Ç: {\"action\": \"list_files\"}\n\n"
            "3. –ó–∞–ø—Ä–æ—Å: '–ü–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã'\n"
            "–û—Ç–≤–µ—Ç: {\"action\": \"list_projects\"}\n\n"
            "4. –ó–∞–ø—Ä–æ—Å: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥: def hello(): return \\\"Hello\\\"'\n"
            "–û—Ç–≤–µ—Ç: {\"action\": \"analyze_code\", \"code\": \"def hello(): return \\\"Hello\\\"\"}\n\n"
            "5. –ó–∞–ø—Ä–æ—Å: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç MyApp'\n"
            "–û—Ç–≤–µ—Ç: {\"action\": \"switch_project\", \"project_name\": \"MyApp\", "
            "\"needs_confirmation\": true, \"confirmation_message\": \"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç MyApp?\"}\n\n"
            f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_request}\n\n"
            "–û—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):"
        )
        
        try:
            # Get response from LLM
            response = self.llm.call(prompt, is_json=True)
            
            # Parse the response
            if isinstance(response, str):
                # Extract JSON from response if it's a string
                json_start = response.find('{')
                json_end = response.rfind('}') + 1
                if json_start >= 0 and json_end > 0:
                    response = response[json_start:json_end]
                try:
                    result = json.loads(response)
                except json.JSONDecodeError:
                    logger.error(f"Failed to parse JSON from response: {response}")
                    result = {"action": "unknown"}
            else:
                result = response
                
            # Ensure required fields exist
            if not isinstance(result, dict):
                result = {"action": "unknown"}
                
            # Set default values
            result.setdefault("needs_confirmation", False)
            result.setdefault("confirmation_message", "")
            
            return result
            
        except Exception as e:
            logger.error(f"Error in _determine_action: {e}", exc_info=True)
            return {"action": "unknown"}
    
    async def _handle_list_files(self) -> Tuple[bool, str]:
        files = self.pm.list_files()
        if not files:
            return True, "–í –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤."
            
        file_list = "\n".join([f"- {f['path']} ({f['size']} bytes)" for f in files])
        return True, f"–§–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ:\n{file_list}"
    
    async def _handle_read_file(self, file_path: str) -> Tuple[bool, str]:
        success, content = self.pm.read_file(file_path)
        if not success:
            return False, content
            
        # Truncate large files for display
        max_length = 2000
        if len(content) > max_length:
            content = content[:max_length] + "\n\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω)"
            
        return True, f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_path}:\n```\n{content}\n```"
    
    async def _handle_write_file(self, file_path: str, content: str, overwrite: bool) -> Tuple[bool, str]:
        success, message = self.pm.write_file(file_path, content, overwrite)
        if not success:
            return False, message
            
        # Verify file was written
        verify_success, verify_content = self.pm.read_file(file_path)
        if not verify_success:
            return False, f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å: {verify_content}"
            
        return True, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}"
    
    async def _handle_execute_script(self, file_path: str) -> Tuple[bool, str]:
        success, stdout, stderr = self.pm.execute_script(file_path)
        if not success:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:\n{stderr}"
            
        output = f"–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –í—ã–≤–æ–¥:\n{stdout}"
        if stderr:
            output += f"\n\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n{stderr}"
            
        return True, output
    
    async def _handle_analyze_code(self, code: str, context: str = "") -> Tuple[bool, str]:
        prompt = (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –¥–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç—á—ë—Ç. "
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n"
            f"–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n```python\n{code}\n```\n\n"
            "–í —Å–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏:\n"
            "1. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n"
            "2. –ï—Å—Ç—å –ª–∏ –≤ –Ω—ë–º –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã?\n"
            "3. –ö–∞–∫ –º–æ–∂–Ω–æ –µ–≥–æ —É–ª—É—á—à–∏—Ç—å?\n"
            "4. –ü—Ä–∏–≤–µ–¥–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
        )
        
        response = self.llm.call(prompt)
        return True, f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:\n\n{response}"
