"""Handlers for file operations."""
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from typing import Dict, Any, Optional, List, Tuple
import logging
import os
from pathlib import Path

from handlers.base import BaseHandler
from core.project.manager import ProjectManager

logger = logging.getLogger(__name__)

class FileHandler(BaseHandler):
    """Handler for file operations."""
    
    def __init__(self, project_manager: ProjectManager):
        super().__init__()
        self.project_manager = project_manager
    
    def get_commands(self) -> Dict[str, dict]:
        """Return supported commands and their handlers."""
        return {
            'list': {
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ',
                'handler': self.handle_list_files,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /list [–ø—É—Ç—å]\n"
                    "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ."
                )
            },
            'read': {
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞',
                'handler': self.handle_read_file,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /read <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>\n"
                    "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."
                )
            },
            'create': {
                'description': '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª',
                'handler': self.handle_create_file,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ]\n"
                    "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º."
                )
            },
            'delete': {
                'description': '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª',
                'handler': self.handle_delete_file,
                'help': (
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>\n"
                    "–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª."
                )
            }
        }
    
    async def handle_list_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle list files command."""
        if not self._check_project_selected(update):
            return None
            
        path = ' '.join(context.args) if context.args else '.'
        success, result = self.project_manager.list_files(path)
        
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {result}"
            
        if not result:
            return f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {path} –ø—É—Å—Ç–∞"
            
        files_list = ["üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"]
        for item in result:
            item_type = "üìÅ" if item['type'] == 'directory' else "üìÑ"
            size = f" ({item['size']} bytes)" if item['type'] == 'file' else ""
            files_list.append(f"{item_type} {item['path']}{size}")
            
        return "\n".join(files_list)
    
    async def handle_read_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle read file command."""
        if not self._check_project_selected(update):
            return None
            
        if not context.args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: /read <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>"
            
        file_path = ' '.join(context.args)
        success, content = self.project_manager.read_file(file_path)
        
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {content}"
            
        return f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_path}:\n\n```\n{content}\n```"
    
    async def handle_create_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle create file command."""
        if not self._check_project_selected(update):
            return None
            
        if not context.args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: /create <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ]"
            
        file_path = context.args[0]
        content = ' '.join(context.args[1:]) if len(context.args) > 1 else ''
        
        success, message = self.project_manager.create_file(file_path, content)
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {message}"
            
        return f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}"
    
    async def handle_delete_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """Handle delete file command."""
        if not self._check_project_selected(update):
            return None
            
        if not context.args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: /delete <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>"
            
        file_path = ' '.join(context.args)
        success, message = self.project_manager.delete_file(file_path)
        
        if not success:
            return f"‚ùå –û—à–∏–±–∫–∞: {message}"
            
        return f"‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}"
    
    def _check_project_selected(self, update: Update) -> bool:
        """Check if a project is selected."""
        if not self.project_manager.current_project:
            update.message.reply_text(
                "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: /project switch <–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞>"
            )
            return False
        return True
