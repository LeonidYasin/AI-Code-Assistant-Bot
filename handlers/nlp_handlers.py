"""Handlers for natural language processing commands"""
import logging
from typing import Dict, Any
from telegram import Update
from telegram.ext import ContextTypes
from core.project.manager import CommandType, ProjectManager
from .commands import command_handler

logger = logging.getLogger(__name__)

@command_handler
def register_nlp_handlers(application):
    """Register natural language command handlers"""
    from telegram.ext import MessageHandler, filters
    # Add a message handler for all text messages that aren't commands
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_natural_language))
    
async def process_natural_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """Process natural language commands"""
    if not context.args and not update.message.text:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
        
    # Get the full command text
    command = ' '.join(context.args) if context.args else update.message.text
    
    # Get project manager from context
    project_manager = context.bot_data.get('project_manager')
    if not project_manager:
        return "‚ùå –û—à–∏–±–∫–∞: ProjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    # Process the command
    result = project_manager.process_natural_language(command)
    if not result.get('success'):
        return f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    # Execute the command
    cmd_type = result.get('type')
    path = result.get('path', '')
    content = result.get('content', '')
    
    try:
        if cmd_type == CommandType.CREATE_FILE:
            success, message = project_manager.create_file(path, content)
            return message
            
        elif cmd_type == CommandType.READ_FILE:
            success, content = project_manager.read_file(path)
            if not success:
                return f"‚ùå {content}"
            return f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {path}:\n\n```\n{content}\n```"
            
        elif cmd_type == CommandType.UPDATE_FILE:
            # For update, we need to get existing content first
            success, current_content = project_manager.read_file(path)
            if not success:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {current_content}"
                
            # Here you could implement a diff/patch mechanism
            # For now, just replace the content
            success, message = project_manager.create_file(path, content)
            return message
            
        elif cmd_type == CommandType.DELETE_FILE:
            # Implement file deletion with confirmation
            return "‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete"
            
        elif cmd_type == CommandType.LIST_FILES:
            success, result = project_manager.list_files(path)
            if not success:
                return f"‚ùå {result}"
                
            if not result:
                return f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {path} –ø—É—Å—Ç–∞"
                
            files_list = ["üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"]
            for item in result:
                item_type = "üìÅ" if item['type'] == 'directory' else "üìÑ"
                size = f" ({item['size']} bytes)" if item['type'] == 'file' else ""
                files_list.append(f"{item_type} {item['path']}{size}")
                
            return "\n".join(files_list)
            
        elif cmd_type == CommandType.ANALYZE_CODE:
            success, result = project_manager.analyze_code(path)
            if not success:
                return f"‚ùå {result}"
                
            return f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ {path}:\n\n{result}"
            
        elif cmd_type == CommandType.RUN_CODE:
            return "‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /run"
            
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd_type}"
            
    except Exception as e:
        logger.error(f"Error executing command: {e}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
