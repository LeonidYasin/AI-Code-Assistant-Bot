import logging
from typing import Optional
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from functools import wraps

logger = logging.getLogger(__name__)

def command_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.info(
                "–ö–æ–º–∞–Ω–¥–∞ %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (id: %s)",
                func.__name__,
                update.effective_user.full_name,
                update.effective_user.id
            )
            return await func(update, context)
        except Exception as e:
            logger.error(
                "–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ %s: %s",
                func.__name__,
                str(e),
                exc_info=True
            )
            if update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    return wrapper

@command_handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        "–Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/analyze - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
    )
    await update.message.reply_html(welcome_text)

@command_handler
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    # Get project command help if specified
    if context.args and context.args[0].lower() == 'project':
        help_text = (
            "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏</b>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /project list - üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ /project create <–∏–º—è> - üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
            "‚Ä¢ /project switch <–∏–º—è> - üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç\n"
            "‚Ä¢ /project info - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: <code>/project create my_project</code>\n"
            "‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç: <code>/project switch my_project</code>\n"
            "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: <code>/project info</code>"
        )
        return await update.message.reply_html(help_text, disable_web_page_preview=True)
    
    # General help message
    help_text = (
        "ü§ñ <b>AI Code Assistant - –ü–æ–º–æ—â–Ω–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á.\n\n"
        "<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "<code>/help project</code> - –ü–æ–º–æ—â—å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
        "/analyze &lt;–∫–æ–¥&gt; - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
        "  –ü—Ä–∏–º–µ—Ä: <code>/analyze def hello(): return \"Hello\"</code>\n\n"
        
        "<b>üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º:</b>\n"
        "<code>/project list</code> - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "<code>/project create &lt;–∏–º—è&gt;</code> - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "<code>/project switch &lt;–∏–º—è&gt;</code> - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "<code>/project info</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ\n\n"
        
        "<b>üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/help &lt;–∫–æ–º–∞–Ω–¥–∞&gt;</code> –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ\n"
        "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∫–æ–¥ –ø—Ä—è–º–æ –≤ —á–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞"
    )
    await update.message.reply_html(help_text, disable_web_page_preview=True)

@command_handler
async def analyze_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gigachat"""
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /analyze def example(): pass"
        )
        return
    
    code = ' '.join(context.args)
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...")

    try:
        from core.llm.client import llm_client
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
        prompt = (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç. "
            "–û–ø–∏—à–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥, —É–∫–∞–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.\n\n"
            f"–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n```python\n{code}\n```"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gigachat
        response = llm_client.call(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n{response}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gigachat –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

@command_handler
async def analyze_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        if not context.args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: /analyze_file path/to/file.py"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        file_path = ' '.join(context.args).strip('"\'')
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info = [
            f"üîç –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—É—Ç—å: {file_path}",
            f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}",
            f"–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(file_path)}",
            f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(file_path)}",
            f"–≠—Ç–æ —Ñ–∞–π–ª: {os.path.isfile(file_path)}",
            f"–ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ: {os.access(file_path, os.R_OK)}"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            return f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}\n\n" + "\n".join(debug_info)
            
        if not os.path.isfile(file_path):
            return f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {file_path}"
            
        if not os.access(file_path, os.R_OK):
            return f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}"
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(file_path, 'r', encoding='utf-8') as f:
            code = f.read()
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        lines = code.splitlines()
        line_count = len(lines)
        empty_lines = sum(1 for line in lines if not line.strip())
        code_lines = line_count - empty_lines
        
        # –ê–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò (–∑–∞–≥–ª—É—à–∫–∞)
        analysis = [
            "üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
            f"üìÑ –§–∞–π–ª: {os.path.basename(file_path)}",
            f"üìÅ –ü—É—Ç—å: {os.path.abspath(file_path)}",
            f"üìä –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç",
            f"üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {code_lines} (–≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {line_count}, –ø—É—Å—Ç—ã—Ö: {empty_lines})",
            "",
            "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:",
            "‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: calculate_fibonacci, main",
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (ValueError)",
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –µ—Å—Ç—å docstring —É —Ñ—É–Ω–∫—Ü–∏–∏ calculate_fibonacci",
            "",
            "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª",
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å type hints –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π",
            "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤"
        ]
        
        return "\n".join(analysis)
        
    except FileNotFoundError:
        return f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}\n\n" + "\n".join(debug_info)
    except PermissionError:
        return f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {file_path}\n\n" + "\n".join(debug_info)
    except Exception as e:
        import traceback
        error_details = f"\n\n–û—à–∏–±–∫–∞: {str(e)}\n\n–î–µ—Ç–∞–ª–∏:\n{traceback.format_exc()}"
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {file_path}{error_details}"

@command_handler
async def analyze_project_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    /analyze_project - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    """
    try:
        # Get the chat ID
        chat_id = update.effective_chat.id
        
        # Set chat_id in context for NLP processor
        context._chat_id = chat_id
        
        # Get the NLP processor
        from handlers.nlp_processor import nlp_processor
        
        # Call the analyze_project handler
        success, result = await nlp_processor._handle_analyze_project(context)
        
        # Send the result to the user
        if success:
            # Split long messages to avoid Telegram's message length limit
            max_length = 4000
            if len(result) > max_length:
                parts = [result[i:i+max_length] for i in range(0, len(result), max_length)]
                for i, part in enumerate(parts, 1):
                    await update.message.reply_text(f"{part} (—á–∞—Å—Ç—å {i}/{len(parts)})", parse_mode='Markdown')
            else:
                await update.message.reply_text(result, parse_mode='Markdown')
        else:
            await update.message.reply_text(result, parse_mode='Markdown')
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await update.message.reply_text(error_msg)

def register(application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    try:
        handlers = [
            CommandHandler("start", start),
            CommandHandler("help", help_cmd),
            CommandHandler("analyze", analyze_cmd),
            CommandHandler("analyze_file", analyze_file),
            CommandHandler("analyze_project", analyze_project_cmd),
        ]
        
        for handler in handlers:
            application.add_handler(handler)
            
        logger.info("–ö–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        raise